#!/bin/sh
#-*- sh -*-

# some constants #
OUTPUT_NAME=bin/printf2
LIBRARIES="-lc -lm bin/libenet.a -Wl,-rpath,\$ORIGIN"
FLAGS="-fsanitize=address -g"
INCLUDES="-Ilib/enet/include -Isrc -Ilib"
##################

# internal vars dont touch #
ARGS=( $@ )
NARG=0
PROG_NAME=$0
############################

set -e

# $1 offset
getarg() {
  echo ${ARGS[$NARG + $1]}
}

argv() {
  R=${ARGS[@]:$NARG}
  echo ${R[@]}
}

target_build_depend() {
  make all
}

target_build() {
  mkdir -p bin
  target_build_depend
  c++ src/server/Main.cpp bin/libserver.a -lGL -lXcursor -lXi -lX11 $FLAGS $LIBRARIES $INCLUDES -o bin/printf2_server
  cc src/client/Main.c -lpthread $FLAGS $LIBRARIES $INCLUDES -o bin/printf2_client
}

target_run() {
  target_build
  bin/printf2_$1 `argv`
}

target_test() {
  cc test/$1.c -Isrc -g && ./a.out
  rm a.out
}

hasargs=1

# Fetch all sparse args
while [ $hasargs -eq 1 ]
do
  case `getarg 0` in
    *)
      hasargs=0
    ;;
  esac
done

case `getarg 0` in
  test)
    target_test `getarg 1`
  ;;
  build)
    target_build
  ;;
  run)
    target_run `getarg 1`
  ;;
  *)
    echo "You can do: run, build"
  ;;
esac


